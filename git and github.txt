Steps for creating a repo and pull push process
 1) Create a directory – learngit 
2) Go inside the dir 
3) Initialize the repo as git repo 
4) Echo Welcome to Git Training > git.txt 
5) Check the status 
6) Git.txt in untracked stage also referred as red zone 
7) Move the file to staging area 
8) Check the status 
9) File should be in green zone – the staged area. 
10) Now commit the file with a message 
11) Check the status 
12) Modify the file 
13) Run the status 
14) File should show modified and in red zone 
15) Move to staging area 
16) Run the status 
17) Run the commit 
18) Check the status – Everything is clean in the status

Remote + Local 1. Create a remote repo 2. Clone it to local

Remote + Local 
1. Create a remote repo 
2. Clone it to local 
3. Add a file and Commit the file 
4. Check the log 
5. Run the status 
6. Add another file and commit the change
7. Check the status 
8. Check the remote repo connection 
9. Fetch 
10. Pull 
11. Push 
12. Check the log 
13. Everything is updated to both the repo 
14. Got to github repo and check the changes done from local

Steps for cloning and log check 
1) Clone the following URL(https://github.com/AbhreshSugandhi/Selenium_Maven_Jenkins_Git) of my repo 
2) Go to the repo and run the terminal 
3) Check the status of the repo 
4) Run the git log commands to see the various views of the log 
5) Run and test your various log commands on this repo to get good view and understand the log commands.


git cheat sheet from abhresh suganthi
Installing Git
 sudo apt-get update
 sudo apt-get install Git

Verifying the installation
 git --version

Change the defaultbranch name of the Main from Master use:
 git config --global init.defaultBranch main

Configuring the username and email ID
 git config --global --list
 git config --global user.name "Username"
 git config --global user.email "Email"

Innitialize repo
 git init

Move the file from untracked/unstaged to staged area
 single file= git add <file name>
 multiple files=  git add .

Commit 
 New file= git commit -m "message"
 modified file= git commit -am "message"

Remote Repo
Connect Local repo with Remote repo: git remote add origin <repo url>
Verify remote connections: git remote -v
Remove remote repo: git remote remove <name of the remote repo>

Log commands
 Commit list in details= git log
 Commit list in one line= git log --oneline
 List of all the authors within the project (s=summary and n = numbered) = git shortlog -s -n
 Commits list by author= git log --author <Author Name>
 OR = git log --author=<2/3 starting letters>
 Logs of specific file= git log --author <Author Name> <filename>
 Logs for a specific file= git log -p <fileName>
 Decorated view of log= git log --all --decorate --oneline --graph
 OR= git log --graph --oneline
 Logs from remote repository - git log reponame/branchname
 Log view of specific commit= git show <comitid> --stat
 View last few commits= git log -<no of commits you want to view>
 View logs between specific dates= git log --after <YYYY-MM-DD> --before <YYYY-MM-DD>
 Detailed view of logs in one line= git log --stat --oneline
 To read the total count of commits in the repo: git log --oneline | wc -l
 
 Reflog Command
 To view the backend log with even the hidden steps we can use: git reflog
 To see all the details of reflog use - git reflog show --all
 

Renameing a file from git
 git mv <old name> <new name>

View the list of configuration
 git config --global --list

Alias:
 git config --global alias.br branch
 git config --global alias.ci commit
 git config --global alias.st status
 git config --global --unset "alias.name"
 git config --global --unset-all

Diff commands:
 Difference between two commits= git diff <old commit> <new commit>
 Difference between two commits= git diff <old commit> <new commit> -- filename
 Modified VS Commited = git diff <filename>
 Staged VS Commited = git diff --staged <Filename>
 Staged VS Specific Commit = git diff <commit ID>
 Remote VS Local = git diff origin/master

Pushing Changes to remote Repo
 1st time push= git push -u origin <remote branch>
 multiple times push= git push

Cloning a repo
 Complete repo= git clone <URL of the repo>
 Only a branch from the repo= git clone -b <Branch name><Repository URL>

View List of Files
 List all files – git ls-files
 List stagged files – git ls-files --stage
 List of file in a directory – git ls-files --directory <dir name>

Configure git ignore to your system
 git config --global core.excludesFile <PATH TO .GITGNORE FILE>

Checkout Commands:
 To switch to a branch = git checkout <branchname>
 To switch to a remote branch = git checkout <remotebranch>
 To switch to a commit git checkout commitid
 To switch to a tag git checkout tagname


Clean Command
 To view the implication of the clean command - Git clean -–dry-run
 To force delete the file from the repo - Git clean -f
 To delete dir - Git clean -f -d
 To delete all the files and dir - Git clean -f -d
 To delete all the ignored file in one go - Git clean -f -x
 To delete all the files and dir incliding ignored files - Git clean -f -d -x
 To delete a specific file - git clean -i >> option 4 >> use yes or no for selecting right file for deletion.

RM Command
 Removes the file from the git and the file system - git rm -f <filename>
 Removes the file only from git repo but actual file will still be there in the project – git rm --cached <filename>

Reset Command
 Move the file to Staging area= git reset --soft <commit-id> 
 Move the file to unstaged area= git reset --mixed <commit-id> 
 Move the files out of records or reverts the file to the stage of previous commited stage git reset --hard <commit-id>

Revert Command
 git revert <commitID>
 Note:- when you want to revert from 5th commit to 3rd commit then pass the commit id of 4th Commit to revert to the 3rd commit stage.

Amend Command
 git commit --amend -m “message”

Tag Command
 Annotated tag= git tag -a <tagname> <commit-id> -m "Message here"
 Lightweight tag= git tag <tag name> <commit-id>
 Get the list of tags= git tag --list
 Get the list of tags with their messages= git tag -n
 Delete a tag= git tag -d <tagname>
 View a specific tag= git show <tagname> 
 Pushing tags to remote repo= git push --tags
 Delete tag from remote= git push --delete origin <tagname>

Stashing Commands
 To stash all the files – git stash
 To show the list of files stashed – git stash list
 To show the latest stash or files stashed at 0th position – git stash show
 To show the stashed records at position 1 – git stash show {1} or use git stash show <stash@{0}>.
 To stash with a message – Git stash save “message”
 To get the files back to work – Git stash pop
 To get back the stashed files at position 1 – Git stash pop {1}
 This will remove the files from the position 1 and it will also delete the change completely and u cannot undo this – Git stash drop {1} / {stash-id}
 Remove all the stashed files in one go – Git stash clear
 Stash Show more details= git stash show -p
 Stashing a single file= git stash -- <filename>

Git Branching
 I want to see the branches available in this repository then: Git branch
 I want to see all the branches including local and remote branches: Git branch -a
 I want to see all the branches and their last/latest commits along with their message: Git branch -v
 Delete a branch: Git branch <branchname> -d 
 Rename a branch: Git branch -m  <oldName> <newName>
 If you are on the branch you want to rename: git branch -m new-name
 To check the parent of a branch = git log -g <branch name>
 To view only the remote branch list: git branch -r
 To create a branch and move inside the newly created branch in one go: git checkout -b <branch name>

Git Merging
 git merge

git rebase
 git rebase

Change the default branch
 git push --set-upstream origin <branchname>



Steps for difference check 
1) Go to learngit project 
2) Check status 
3) Create a new file – temp.txt 
4) Move it to staging area 
5) Commit the change 
6) Check status 
7) Now edit the temp.txt 
8) Check the status 
9) File should be in modified stage/unstaged area 
10) Run the diff command 
11) You can view the difference between the committed file and unstaged file 
12) Now move the file to staging area 
13) Run the diff command 
14) You will see the difference between the committed file and staging file 
15) Commit the file 
16) Run the oneline log and take the latest two commit id’s 
17) Run the diff command to view the difference between the two commits 
18) You will be able to see the differences between two committed stage of the same file.

Steps for Alias 
1) Go to learngit repo 
2) Run the status 
3) Check the global configuration list 
4) Now add the alias for oneline log command 
5) Now add the alias for status command 
6) Now run the global configuration list again. 
7) It will show you the alias registered in the list. 
8) Now verify the alias.


Steps for Rename 
1) Go to learngit repo 
2) Run status 
3) Take two files 
4) Rename one file using git command 
5) Check the status 
6) File in staging area and git tracking it to be renamed 
7) Now edit another file from UI side of the lab 
8) Go to terminal 
9) Run status 
10) Git shows the recently renamed file as deleted with old name and new file with new name
11) Move all the file to staging area 
12) Now run the status 
13) All files are in staging area with the highlighter as renamed. 
14) Commit the changes.

Steps for Amend 
1) Go to learngit repo 
2) Check the status 
3) Now create a file – amend.txt 
4) Add a heading with mistakes in the text “ We are teaching git amend command” 
5) Now check the status 
6) Move the file to staging area 
7) Commit the changes 
8) Now you want to rectify the change with the awareness of others 
9) Check the one line log 
10) Now correct the text as - “ We are learning git amend command” 
11) Go to repo and check the status 
12) File is visible in unstaged stage 
13) Move the file to staged 
14) Commit the changes but with the help of using the amend command 
15) Check the one line log 
16) Your log will show the same no of commit, but the last commit will be updated with the correct information.


Steps for tags 
1) Go to learngit repo 
2) Check the status 
3) Check the oneliner log 
4) Find out which commit is to be added with a tag 
5) Run the lightweight tag command with the commit id 
6) Now run the oneliner log again 
7) The tag is reflected with a yellow color shade 
8) Find out one more commit id which is to be added with a tag 
9) Run the Annotated tag command with the commit id and the message 
10) Run the tag list command 
11) Tags with messages will be displayed 
12) Let’s delete one of the tag using tag deleting command 
13) Run the oneliner log to verify if the tag is visible on the log 
14) Run the tag list command to verify if we have successfully deleted the tag.


1. Don't use a VPN. 
2. Delete your current browser's cookies and cache. 
3. Please try another browser like Firefox or Chrome. 
I request that you try opening the lab on your personal machine, 
as office machines (laptops) generally have certain security barricades that hinder the lab from functioning smoothly. 
4. Please check the date and time on your local system and see if it's the same date and time mentioned in your timezone. 
If it isn't the same, please change it to the correct date and time and try logging into your lab. 
5. To work at maximum speed in the lab, ensure that your internet connection has a speed of at least 30 Mbps. 
6. If the above doesn't help, we suggest that you please stop/end your lab. Log out of your LMS and give the lab a cool down time of 5-10 minutes and relog in to your LMS. 
This should resolve your issue.

Steps for ignore 
1) Configure the gitignore using configuration command to be done only one time in the same machine 
2) Go to learngit 
3) Run the status 
4) Create a file with any name but with an extension as .gitignore 
5) Add two files with test1.ppt and test2.xlsx 
6) Run status 
7) Files are in red zone i.e. untracked file stage 
8) Now edit the .gitignore file and add the file extensions? 
9) Run the status 
10) Now files not visible in the status 
11) Now mark the commit of changes in .gitignore file 
12) Run the status 
13) Now the .gitignore file is tracked but the files mentioned inside the file are not been tracked


Steps for Stashing 
1) Go to learngit repo 
2) Create a new file – stash1.txt 
3) Add a heading in the file 
4) Commit the file 
5) Create a new file – stash2.txt 
6) Add a heading in the file 
7) Run the status 
8) File is visible in untracked stage 
9) Now run the stash command for a file 
10) Git will reject it 
11) Now add the stash2.txt to staging area 
12) Now run the stash command for a file again 
13) Your file is stashed 14) Now edit stash1.txt 
15) Run the status
16) File in unstaged zone 
17) Now run the stash command 
18) Your file is stashed 
19) Run the status 
20) Now check the files in stashing space 
21) Get the stash2.txt back to working directory using the pop command 
22) Make the pending changes in the file and commit the file 
23) Now get the stash1.txt popped out from stashing space 
24) Make the pending changes and commit the file. 
25) Now edit the stash2.txt 
26) Run the status 
27) File is in unstaged area 
28) Run the stash command 
29) See the stash list 
30) Run the delete stash command 
31) See the stash list 
32) The modified changes and the stashed file are deleted 
33) File is still in the repo but with old content.

https://github.com/KwokHing/GSP345-Automating-Infrastructure-on-Google-Cloud-with-Terraform-Challenge-Lab/tree/main

https://github.com/vdharmaraj/PGDO_Proj3/blob/main/README.md


Steps for Clean 
1) Go to learngit repo 
2) Run the status 
3) Add a new file 
4) Run the status 
5) File in the untracked area 
6) Now run the command to remove the file 
7) Run the status 
8) File removed 
9) Add a directory and a file inside the directory 
10) Add a file outside the directory 
11) Now run the clean command to remove the directory and files 
12) Run the status file and directory is removed successfully 
13) Add a directory and a file inside the directory 
14) Add a file outside the directory 
15) Now run the clean command to remove the directory and files along with ignored files 
16) Run the status file and directory is removed successfully

Steps for RM 
1) Go to learngit repo 
2) Run status 
3) Add a new file testrm1.txt 
4) Commit the change 
5) Run the status 
6) Run the rm command to delete testrm1.txt 
7) File is deleted 
8) Run the status 
9) Now add a new file testrm2.txt and commit it 
10) Now run the status 
11) Now run the command for removing the file but without deleting it from the repo 
12) Run the status 
13) Same file now visible in unstaged and staged area 
14) Just commit the file from staging area keeping the unstaged file as it is 
15) Run the status 
16) Record of deletion moved to the commit
 17) New file is in untracked area 
18) Add the same file name testrm2.txt in the .gitignore 
19) Now run the status 
20) Now the file is not visible instead .gitignore is visible as modified 
21) Run the commit for .gitignore 
22) Run the status 
23) Now the file is never going to be a part of the repo further. 
24) History of that file is over.

Steps for Reset 
1) Go to learngit repo 
2) Add a new file reset.txt 
3) Add a heading – “Welcome to Git and Github Course” 
4) Check the status 
5) Commit the changes 
6) Modify reset.txt by adding second line – “Instructor-led Learning!” 
7) Check the status 
8) Commit the changes 
9) Now you have two commits for the same file 
10) Add another commit with line 3 – “By Abhresh” 
11) Run the mixed reset command and go to 1st commit 
12) Run the status – File should be in unstaged area 
13) Move the file back to the committed stage by committing the file 
14) Run the soft reset command 
15) Run the status – File should be in staged area 
16) Move the file back to the committed stage by committing the file 
17) Run the hard reset command 
18) Run the status – File is deleted 
19) Now commit the changes of deletion of the file.

Steps for reset part 2 
1) Go to learngit repo 
2) Run the status 
3) Run the oneliner log 
4) Copy any old commit where a new file was created 
5) Run the reset command to move the repo to that commit 
6) This will reset the history to that commit and now all the newer commits are deleted.

Steps for revert command 
1) Make a new dir – revertgit 
2) Add a new file – a.txt 
3) Commit the change with a msg as m1 
4) Add a new file – b.txt 
5) Commit the change with a msg as m2 
6) Add a new file – c.txt 
7) Commit the change with a msg as m3 
8) Run the log 
9) Run the revert with commit id of 3rd commit 
10) Your c.txt gets deleted and a new commit is created for reverting to the stage of 2nd commit completion. 
11) Run the log 
12) The repository is back to the state of 2nd commit


Steps for revert command part2 
13) To bring back the latest commit back to the repo 
14) Run the log 
15) Run the reset to commit 3 
16) But the file is not back into the repo 
17) Run the checkout c.txt 
18) This will bring the file back to our repo.

Steps for Reset 
1) Go to learngit repo 
2) Add a new file reset.txt 
3) Add a heading – “Welcome to Git and Github Course” 
4) Check the status 
5) Commit the changes 
6) Modify reset.txt by adding second line – “Instructor-led Learning!” 
7) Check the status 
8) Commit the changes
 9) Now you have two commits for the same file 
10) Add another commit with line 3 – “By Abhresh” 
11) Run the mixed reset command and go to 1st commit 
12) Run the status – File should be in unstaged area 
13) Move the file back to the committed stage by committing the file 
14) Run the soft reset command 
15) Run the status – File should be in staged area 
16) Move the file back to the committed stage by committing the file 
17) Run the hard reset command 
18) Run the status – File is deleted 
19) Now commit the changes of deletion of the file.

Steps for reset part 2 
1) Go to learngit repo 
2) Run the status 
3) Run the oneliner log 
4) Copy any old commit where a new file was created 
5) Run the reset command to move the repo to that commit 
6) This will reset the history to that commit and now all the newer commits are deleted.


Steps for revert command 
1) Make a new dir – revertgit 
2) Add a new file – a.txt 
3) Commit the change with a msg as m1 
4) Add a new file – b.txt 
5) Commit the change with a msg as m2 
6) Add a new file – c.txt 
7) Commit the change with a msg as m3 
8) Run the log 
9) Run the revert with commit id of 3rd commit 
10) Your c.txt gets deleted and a new commit is created for reverting to the stage of 2nd commit completion. 
11) Run the log 
12) The repository is back to the state of 2nd commit

Steps for revert command part2 
13) To bring back the latest commit back to the repo 
14) Run the log 
15) Run the reset to commit 3 
16) But the file is not back into the repo 
17) Run the



Steps for Forking a repo 
1) Go to the login environment of the GitHub 
2) Navigate to the respective repository which is to be forked 
3) Find out the fork button on the repository page and click on it 
4) Now you will be navigated to a repository which is a forked copy of the project https://github.com/abhreshs/Forking_Demo60.git

Steps for Creating a pull request 
1) Make some changes in the forked copy 
2) Commit the same 
3) Go to Pull request menu 
4) Select the repo from where you want to create a pull request 
5) Now click on create merge request button 
6) Once this process is done wait for the repository owner to accept or reject your request 
7) Based on the decision the acceptance or rejection will be visible

Steps for Branching 
1) Create a new repo 
2) Add a new file and commit the changes 
3) Run the command to see the list of branches 
4) Only main branch visible 
5) Create a new branch with the name develop 
6) Move inside the develop branch 
7) Create a new branch feature1 
8) Create a new branch feature2 
9) Run the command to see the list of branches 
10) 4 branches with their names visible 
11) Now delete the feature1 branch

Merge 
1) Create a repo 
2) Add readme.txt and commit it as “m1” 
3) Modify the readme.txt and commit it as “m2” 
4) Create a branch as “feature” 
5) Checkout to feature branch 
6) Add feature.txt and commit it as “f1” 
7) Modify the feature.txt and commit it as “f2” 
8) Go to main 9) Run merge feature



Steps with recursive merge without conflict 
1) Create a repo 
2) Add readme.txt and commit it as “m1” 
3) Modify the readme.txt and commit it as “m2” 
4) Create a branch as “feature” 
5) Checkout to feature branch 
6) Add feature.txt and commit it as “f1”
7) Modify the feature.txt and commit it as “f2” 
8) Now checkout main and edit the readme.txt and commit it as “m3”
 9) Git merge feature 
10) Vim tool will open and it will ask you for a merge commit message 
11) Once done run the log and now you can see the merge commit.